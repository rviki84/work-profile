/*
* Copyright (c) 2015,
* Computational Image and Simulation Technologies in Biomedicine (CISTIB),
* The University of Sheffield (TUoS), Sheffield, UK. All rights reserved.
* See license.txt file for details.
*/

#ifndef _PatientInfoPluginPatientWorkingAreaWidget_H
#define _PatientInfoPluginPatientWorkingAreaWidget_H

#include "PatientInfoPluginPatientWorkingAreaProcessor.h"
#include "PatientInfoPluginPatientWorkingAreaWidgetUI.h"

// CoreLib
#include "coreRenderingTree.h"
#include "corePointInteractorPointSelect.h"
#include "coreProcessingWidget.h"
#include "coreDICOMFileReader.h"



namespace Core{ namespace Widgets {
	class UserHelper;
	class DataEntityListBrowser;
}}
	
namespace patientInfoPlugin
{
	class PatientInfoIOMenuEventHandler;
	
/**
PanelWidget for interacting with patientInfoPlugin::PatientWorkingAreaProcessor.

The parent class PatientInfoPluginPatientWorkingAreaWidgetUI contains all the code for 
buttons, labels, layouts, etc.

The PatientWorkingAreaWidget provides the functions that handle the GUI events 
generated by PatientInfoPluginPatientWorkingAreaWidgetUI (see for example the function 
OnBtnSub).


\note In Gimias there's several PanelWidgets for different processors in 
different plug-ins. All the panel widgets are disabled except the active one that will be 
enabled ( Enable() ). The active one is the one that the user clicked.
If you need to catch the event when this panel widget is enabled or disabled
overwrite the function Enable( ). Be careful when you call Enable( true ) to 
this widget because the behavior will be unpredicted.

\ingroup PatientInfoPlugin
\author Vignesh Rammohan
\date 17 August 2015
*/
class PatientWorkingAreaWidget : 
    public PatientInfoPluginPatientWorkingAreaWidgetUI,
    public Core::Widgets::ProcessingWidget 
{

// OPERATIONS
public:
	//!
	coreDefineBaseWindowFactory( PatientWorkingAreaWidget );
	
	//!
	PatientWorkingAreaWidget(wxWindow* parent, int id= wxID_ANY,
		const wxPoint&  pos = wxDefaultPosition, 
		const wxSize&  size = wxDefaultSize, 
		long style = 0);

	//!
	~PatientWorkingAreaWidget( );

	//! Add button events to the bridge and call UpdateWidget()
	void OnInit(  );
	
	//!
	bool Enable( bool enable /*= true */ );
	
	//!
	Core::BaseProcessor::Pointer GetProcessor( );

	//!
	void ReadDataSet( const std::string &filename );

private:
	//! Update GUI from working data
	void UpdateWidget();

	//! Update working data from GUI
	void UpdateData();

	//! 
	void OnTreeSelChanged(wxTreeEvent& event);

	//! Event handler for checking/unchecking the Advanced Options check box
	void OnChkAdvancedOpt(wxCommandEvent &event);

	//!
	void UpdateHelperWidget( );

	//!
	void OnModifiedInputDataEntity();

	//!
	void OnModifiedOutputDataEntity();

	//! Called when selected slice number changes
	void OnSelectedSliceModified();

	//! Get desired entries from the selected slice (header of a DICOM file)
	void GetDICOMEntries(gdcm::DocEntrySet* docEntrySet);

	//!
	void UpdateDataEntity(wxTreeItemId sliceTreeItemId);

	//! expand the tree to the default position, and update data entity
	void DoStartStep();

	//!
	void BuildSeriesCollectiveFromSeriesDataset();

	//! Get the currently selected slice path.
	std::string GetSelectedSlicePath() const;

	//! Called when the file path is modified.
	void OnModifiedFilePath();

	//! Update the grid.
	void UpdateTagsGrid();

	//!
	void UpdateEntry( gdcm::DocEntry* docEntry, wxTreeItemId parent );

	//!
	void UpdateSeqEntry( gdcm::DocEntrySet* docEntrySet, wxTreeItemId parent );

	//!
	std::string GetEntryValue( gdcm::DocEntry* docEntry );

	//!
	std::vector<Core::DataEntity::Pointer> BuildDataEntities( 
		wxArrayTreeItemIds treeItemIdsArray,
		bool postProcessData,
		bool forRendering );

	//! Register readers from DICOMReader of Kernel into m_Reader
	void RegisterReaders( );

	//!
	dcmAPI::DataSet::Pointer GetDataSet( );
	
// ATTRIBUTES
private:
	//! Working data of the processor
	PatientWorkingAreaProcessor::Pointer m_Processor;

	//! Holds the dicom Image that is currently selected.
	Core::DataEntityHolder::Pointer m_dcmImageDataHolder;

	//!
	Core::IO::DICOMFileReader::Pointer m_Reader;

	//!
	PatientInfoIOMenuEventHandler *m_PatientInfoIOMenuEventHandler;

	//! Selected slice number (-1 if no selection)
	Core::DataHolder<int>::Pointer m_SelectedSliceHolder;

	//! Tags map: map< <tag, name>, value >
	gdcm::File m_File;

	//! Previous 
	gdcm::File m_PreviousFile;

	//!
	std::string m_Filename;

}; // class PatientWorkingAreaWidget

} //namespace patientInfoPlugin

#endif //_PatientInfoPluginPatientWorkingAreaWidget_H
