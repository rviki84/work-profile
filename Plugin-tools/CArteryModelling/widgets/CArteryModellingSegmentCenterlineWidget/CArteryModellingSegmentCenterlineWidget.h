/*
* Copyright (c) 2015,
* Computational Image and Simulation Technologies in Biomedicine (CISTIB),
* The University of Sheffield (TUoS), Sheffield, UK. All rights reserved.
* See license.txt file for details.
*/

#ifndef _CArteryModellingSegmentCenterlineWidget_H
#define _CArteryModellingSegmentCenterlineWidget_H

#include "camSegmentCenterlineProcessor.h"
#include "CArteryModellingSegmentCenterlineWidgetUI.h"

// CoreLib
#include "coreRenderingTree.h"
#include "corePointInteractorPointSelect.h"
#include "coreProcessingWidget.h"
#include "coreLandmarkSelectorWidget.h"
#include "corePointTrackingInteractorWithPolicy.h"
#include "PointTrackingOnCenterlinePolicy.h"

#include <vtkSphereSource.h>

namespace Core{ namespace Widgets {
	class UserHelper;
	class DataEntityListBrowser;
}}
	
namespace cam
{

/**
PanelWidget for interacting with coronaryArteryModeling::SegmentCenterlineProcessor.

The parent class CArteryModellingSegmentCenterlineWidgetUI contains all the code for 
buttons, labels, layouts, etc.

The SegmentCenterlineWidget provides the functions that handle the GUI events 
generated by CArteryModellingSegmentCenterlineWidgetUI (see for example the function 
OnButtonApply).


\note In Gimias there's several PanelWidgets for different processors in 
different plug-ins. All the panel widgets are disabled except the active one that will be 
enabled ( Enable() ). The active one is the one that the user clicked.
If you need to catch the event when this panel widget is enabled or disabled
overwrite the function Enable( ). Be careful when you call Enable( true ) to 
this widget because the behavior will be unpredicted.

\ingroup CoronaryArteryModeling
\author Vignesh Rammohan
\date 30 July 2015
*/
class SegmentCenterlineWidget : 
    public CArteryModellingSegmentCenterlineWidgetUI,
    public Core::Widgets::ProcessingWidget 
{

// OPERATIONS
public:
	typedef vtkSmartPointer<vtkPolyData> VtkPolyDataPtr;
	//Information holder type for the 3D point
	typedef Core::DataHolder< double* > 
		PointInformationHolder;
	
	//!
	coreDefineBaseWindowFactory( SegmentCenterlineWidget );
	
	//!
	SegmentCenterlineWidget(wxWindow* parent, int id= wxID_ANY,
		const wxPoint&  pos = wxDefaultPosition, 
		const wxSize&  size = wxDefaultSize, 
		long style = 0);

	//!
	~SegmentCenterlineWidget( );

	//! Add button events to the bridge and call UpdateWidget()
	void OnInit(  );
	
	//!
	bool Enable( bool enable /*= true */ );
	
	//!
	Core::BaseProcessor::Pointer GetProcessor( );

private:
	//! Update GUI from working data
	void UpdateWidget();

	//! Update working data from GUI
	void UpdateData();

	//!
	void UpdateHelperWidget( );

	//!
	void OnModifiedInputDataEntity();

	//!
	void OnModifiedOutputDataEntity();

	//! Event handler for checking/unchecking the Advanced Options check box
	void OnChkAdvancedOpt(wxCommandEvent &event);

	//! Event handler for the click on the Select Artery/Cancel Selection toggle button
	void OnBtnSelectArtery(wxCommandEvent &event);

	//! Event handler for the click on the Get Helper Point button
	void OnBtnGetHelperPoint(wxCommandEvent &event);

	//! Event handler for the click on the Segment Centerline button
	void OnBtnSegment(wxCommandEvent &event);

	//! Event handler for the click on the Dummy Segment button
	void OnBtnDummySegment(wxCommandEvent &event);

	//! Event handler for the click on the Merge Segments button
	void OnBtnMerge(wxCommandEvent &event);

	//! Event handler for the click on the Delete Segment button
	void OnBtnDeleteSegment(wxCommandEvent &event);

	//! Event handler for the click on the Sample Radius button
	void OnBtnSampleRadius(wxCommandEvent &event);

	//! Event handler for the click on enter key on the Start Radius text input box
	void OnTxtStartRadius(wxCommandEvent &event);
	
	//! Event handler for the click on enter key on the End Radius text input box
	void OnTxtEndRadius(wxCommandEvent &event);

	//! Event handler for the click on enter key on the Resampling Rate text input box
	void OnTxtResample(wxCommandEvent &event);

	//! Event handler for the click on enter key on the Smoothing Window Width text input box
	void OnTxtSmooth(wxCommandEvent &event);

	//! Event handler for the click on enter key on the Frame # text input box
	void OnTxtFrameNum(wxCommandEvent &event);

	//! Event handler for the click on enter key on the Branch # text input box
	void OnTxtBranchNum(wxCommandEvent &event);

	//! Enable LandmarkSelector Interactor
	void ConnectInteractor();

	//! Disable LandmarkSelector Interactor
	void DisconnectInteractor();

	//! Stop the LandmarkSelector Interaction
	void StopInteraction();

	//! Call back function for the observer on the selection of the Input data entity START_END_POINTS
	void OnSelectedPoints();

	//! Call back function for the observer on change in the current image time step
	void OnChangeInTimeStep();

	//! Remove m_MouseTracker interactor from mitk::GlobalInteraction
	void RemoveMouseInteractor();

	//! Add m_MouseTracker interactor to mitk::GlobalInteraction
	void AddMouseInteractor();

	//! Helper function that instantiates a PointTrackingOnCenterlinePolicy 
	void InstantiateCenterlinePointPolicy( VtkPolyDataPtr skeleton );

	//! Call back function for the observer on change in the mouse pointer in the 3D space
	void OnModifiedMousePoint();

	//! Call back function for the observer on the selection of the Input data entity CENTERLINE1
	void OnModifiedInputCenterline1();
	
// ATTRIBUTES
private:
	//! Working data of the processor
	SegmentCenterlineProcessor::Pointer m_Processor;

	//! Check the LandmarkSelector Interactor status
	bool m_interactionEnabled;

	//! Cardiac phases calculated from the ECG signal
	std::vector<double> m_CardiacPhases;

	//! Image timestep change signal
	boost::signals::connection m_SignalOnChangeInTimeStep;

	//! Used to store the nearest centerline point to the current mouse position
	PointInformationHolder::Pointer m_PointInformationHolder;
	//! Tracks the mouse position in the 3D space
	Core::PointTrackingInteractorWithPolicy::Pointer m_MouseTracker;
	//! A point tracking policy for acquiring a centerline point coordinates
	Core::PointTrackingInteractorPolicy::Pointer m_PointValuePolicy;

	bool m_IsLandmarkModified;

	vtkSmartPointer<vtkSphereSource> m_SphereSource;

	double m_HelperPoint[3];

}; // class SegmentCenterlineWidget

} //namespace cam

#endif //_CArteryModellingSegmentCenterlineWidget_H
