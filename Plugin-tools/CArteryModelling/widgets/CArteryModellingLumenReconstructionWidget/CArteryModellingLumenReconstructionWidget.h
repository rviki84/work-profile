/*
* Copyright (c) 2015,
* Computational Image and Simulation Technologies in Biomedicine (CISTIB),
* The University of Sheffield (TUoS), Sheffield, UK. All rights reserved.
* See license.txt file for details.
*/

#ifndef _CArteryModellingLumenReconstructionWidget_H
#define _CArteryModellingLumenReconstructionWidget_H

#include "camLumenReconstructionProcessor.h"
#include "CArteryModellingLumenReconstructionWidgetUI.h"

// CoreLib
#include "coreRenderingTree.h"
#include "corePointInteractorPointSelect.h"
#include "coreProcessingWidget.h"
#include "coreLandmarkSelectorWidget.h"

namespace Core{ namespace Widgets {
	class UserHelper;
	class DataEntityListBrowser;
}}
	
namespace cam
{

/**
PanelWidget for interacting with cam::LumenReconstructionProcessor.

The parent class CArteryModellingLumenReconstructionWidgetUI contains all the code for 
buttons, labels, layouts, etc.

The LumenReconstructionWidget provides the functions that handle the GUI events 
generated by CArteryModellingLumenReconstructionWidgetUI (see for example the function 
OnButtonApply).


\note In Gimias there's several PanelWidgets for different processors in 
different plug-ins. All the panel widgets are disabled except the active one that will be 
enabled ( Enable() ). The active one is the one that the user clicked.
If you need to catch the event when this panel widget is enabled or disabled
overwrite the function Enable( ). Be careful when you call Enable( true ) to 
this widget because the behavior will be unpredicted.

\ingroup CoronaryArteryModeling
\author Vignesh Rammohan
\date 10 November 2015
*/
class LumenReconstructionWidget : 
    public CArteryModellingLumenReconstructionWidgetUI,
    public Core::Widgets::ProcessingWidget 
{

// OPERATIONS
public:
	//!
	coreDefineBaseWindowFactory( LumenReconstructionWidget );
	
	//!
	LumenReconstructionWidget(wxWindow* parent, int id= wxID_ANY,
		const wxPoint&  pos = wxDefaultPosition, 
		const wxSize&  size = wxDefaultSize, 
		long style = 0);

	//!
	~LumenReconstructionWidget( );

	//! Add button events to the bridge and call UpdateWidget()
	void OnInit(  );
	
	//!
	bool Enable( bool enable /*= true */ );
	
	//!
	Core::BaseProcessor::Pointer GetProcessor( );

private:
	//! Update GUI from working data
	void UpdateWidget();

	//! Update working data from GUI
	void UpdateData();

	//!
	void UpdateHelperWidget( );

	//!
	void OnModifiedInputDataEntity();

	//!
	void OnModifiedOutputDataEntity();

	//! Event handler for the click on the Compute Surface button
	void OnBtnComputeSurface(wxCommandEvent& event);

	//! Event handler for checking/unchecking the Advanced Options check box
	void OnChkAdvancedOpt(wxCommandEvent &event);

	//! Event handler for the click on enter key on the Outlier Weight text input box
	void OnTxtOutlierWeight(wxCommandEvent &event);
	
	//! Event handler for the click on enter key on the No. of Iterations text input box in Registration parameters
	void OnTxtNoOfItersCPD(wxCommandEvent &event);

	//! Event handler for the click on enter key on the Tolerance text input box
	void OnTxtTolerance(wxCommandEvent &event);

	//! Event handler for the click on enter key on the Epipolar Distance Threshold text input box
	void OnTxtEpiDistThres(wxCommandEvent &event);

	//! Event handler for the click on enter key on the Skip Distance text input box
	void OnTxtSkipDist(wxCommandEvent &event);

	//! Event handler for the click on enter key on the Skip Cost text input box
	void OnTxtSkipCost(wxCommandEvent &event);

	//! Event handler for the click on enter key on the Length Cost text input box
	void OnTxtLengthCost(wxCommandEvent &event);
	
	//! Event handler for the click on enter key on the No. of Iterations text input box in Optimal Subsequence Bijection parameters
	void OnTxtNoOfItersOSB(wxCommandEvent &event);

	//! Event handler for the click on enter key on the Resolution Levels text input box
	void OnTxtResLevel(wxCommandEvent &event);

	//! Event handler for the click on enter key on the Reconstruction Depth text input box
	void OnTxtReconDepth(wxCommandEvent &event);

	//! Event handler for the click on enter key on the Interpolation Weight text input box
	void OnTxtPointWt(wxCommandEvent &event);


// ATTRIBUTES
private:
	//! Working data of the processor
	LumenReconstructionProcessor::Pointer m_Processor;

}; // class LumenReconstructionWidget

} //namespace cam

#endif //_CArteryModellingLumenReconstructionWidget_H
